跳至主要內

容

labuladong 的算法笔

记

主站

本站

会员

反馈问

题

本站简介



动态规划解

题套路框架



动态规划设

计：最长递增子序列

base case 和备

忘录的初始

值怎么定？

动

态规划穷举

的两种视角



动态规划和

回溯算法的

思维转换

对

动态规划进

行降维打击



最优子结构

原理和 dp 数组

遍历方向

清

除阅读历史

动态规划设

计：最长递增

子序列

labuladong原创

约 3536 字

解决 2 题

插件未连接



网站会员未

解锁

 遇到问

题

此页内容



一、动态规划

解法

二、二分

查找解法

三

、拓展到二维



本文讲解的

例题

LeetCode	力扣	难

度

300. Longest Increasing Subsequence

300. 最长递增

子序列	🟠

354.

Russian Doll Envelopes	354.

俄罗

斯套娃信封

问题	🔴



前置知

识

阅读本文

前，你需要先

学习：

动态规

划核心框架

也许有读者

看了前文 动

态规划详解

，学会了动态

规划的套路

：找到了问题

的「状态」，明确

了

dp 数组/函数

的含义，定义

了 base case；但是不知

道如何确定

「选择」，也就是

找不到状态

转移的关系

，依然写不出

动态规划解

法，怎么办？

不

要担心，动态

规划的难点

本来就在于

寻找正确的

状态转移方

程，本文就借

助经典的「最

长递增子序

列问题」来讲

一讲设计动

态规划的通

用技巧：数学

归纳思想。



最

长递增子序

列（Longest Increasing

Subsequence，简写 LIS）是非

常经典的一

个算法问题

，比较容易想

到的是动态

规划解法，时

间复杂度 O(N^2)，我

们借这个问

题来由浅入

深讲解如何

找状态转移

方程，如何写

出动态规划

解法。比较难

想到的是利

用二分查找

，时间复杂度

是 O(NlogN)，我们通过

一种简单的

纸牌游戏来

辅助理解这

种巧妙的解

法。

力扣第 300 题

「最长递增子

序列」就是这

个问题：

300.

最长

递增子序列

| 力扣 | LeetCode

|  🟠

给你一

个整数数组

nums ，找到其中最

长严格递增

子序列的长

度。



子序列

是

由数组派生

而来的序列

，删除（或不删

除）数组中的

元素而不改

变其余元素

的顺序。例如

，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子

序列。

示例 1：

输

入：nums = [10,9,2,5,3,7,101,18]

输出：4

解释

：最长递增子

序列是 [2,3,7,101]，因此

长度为 4 。

示例

2：



输入：nums =

[0,1,0,3,2,3]

输出：4



示

例

3：



输入：nums =

[7,7,7,7,7,7,7]

输出

：1



提示：



1 <= nums.length <=

2500

-104 <= nums[i] <=

104



进阶：

你

能将算法的

时间复杂度

降低到

O(n log(n)) 吗?

// 函

数签名

int lengthOfLIS(vector<int>&

nums);



比如

说输入 nums=[10,9,2,5,3,7,101,18]，其中

最长的递增

子序列是

[2,3,7,101]，所

以算法的输

出应该是 4。



注

意「子序列」和

「子串」这两个

名词的区别

，子串一定是

连续的，而子

序列不一定

是连续的。下

面先来设计

动态规划算

法解决这个

问题。

一、动态

规划解法



动

态规划的核

心设计思想

是数学归纳

法。

相信大家

对数学归纳

法都不陌生

，高中就学过

，而且思路很

简单。比如我

们想证明一

个数学结论

，那么我们先

假设这个结

论在 k < n

时成立

，然后根据这

个假设，想办

法推导证明

出 k = n

的时候此

结论也成立

。如果能够证

明出来，那么

就说明这个

结论对于 k 等

于任何数都

成立。

类似的

，我们设计动

态规划算法

，不是需要一

个 dp 数组吗？我

们可以假设

dp[0...i-1] 都已经被算

出来了，然后

问自己：怎么

通过这些结

果算出

dp[i]？



直接

拿最长递增

子序列这个

问题举例你

就明白了。不

过，首先要定

义清楚 dp

数组

的含义，即 dp[i] 的

值到底代表

着什么？

我们

的定义是这

样的：dp[i] 表示以

nums[i] 这个数结尾

的最长递增

子序列的长

度。

Info



为什么这

样定义呢？这

是解决子序

列问题的一

个套路，后文

动态规划之

子序列问题

解题模板 总

结了几种常

见套路。你读

完本章所有

的动态规划

问题，就会发

现

dp 数组的定

义方法也就

那几种。



根据

这个定义，我

们就可以推

出

base case：dp[i] 初始值为

1，因为以 nums[i]

结尾

的最长递增

子序列起码

要包含它自

己。



举两个例

子：

这个 GIF 展示

了算法演进

的过程：

根据

这个定义，我

们的最终结

果（子序列的

最大长度）应

该是 dp 数组中

的最大值。

int res = 0;

for (int i =

0; i < dp.length;

i++) {

res = Math.max(res,

dp[i]);

}

return res;

读

者也许会问

，刚才的算法

演进过程中

每个 dp[i] 的结果

是我们肉眼

看出来的，我

们应该怎么

设计算法逻

辑来正确计

算每个 dp[i]

呢？



这

就是动态规

划的重头戏

，如何设计算

法逻辑进行

状态转移，才

能正确运行

呢？这里需要

使用数学归

纳的思想：

假

设我们已经

知道了 dp[0..4] 的所

有结果，我们

如何通过这

些已知结果

推出 dp[5]

呢？



根据

刚才我们对

dp 数组的定义

，现在想求

dp[5] 的

值，也就是想

求以 nums[5] 为结尾

的最长递增

子序列。

nums[5] = 3，既然

是递增子序

列，我们只要

找到前面那

些结尾比 3

小

的子序列，然

后把 3 接到这

些子序列末

尾，就可以形

成一个新的

递增子序列

，而且这个新

的子序列长

度加一。

nums[5] 前面

有哪些元素

小于 nums[5]？这个好

算，用 for

循环比

较一波就能

把这些元素

找出来。



以这

些元素为结

尾的最长递

增子序列的

长度是多少

？回顾一下我

们对 dp

数组的

定义，它记录

的正是以每

个元素为末

尾的最长递

增子序列的

长度。



以我们

举的例子来

说，nums[0] 和

nums[4] 都是小

于 nums[5] 的，然后对

比

dp[0] 和 dp[4] 的值，我

们让

nums[5] 和更长

的递增子序

列结合，得出

dp[5] = 3：

for (int j =

0; j < i;

j++) {

if (nums[i] >

nums[j]) {



dp[i] = Math.max(dp[i], dp[j]

+ 1);

}

}

当 i = 5

时，这段代

码的逻辑就

可以算出 dp[5]。其

实到这里，这

道算法题我

们就基本做

完了。



读者也

许会问，我们

刚才只是算

了

dp[5] 呀，dp[4], dp[3] 这些怎

么算呢？类似

数学归纳法

，你已经可以

算出

dp[5] 了，其他

的就都可以

算出来：



for

(int i = 0;

i < nums.length; i++)

{

for (int j =

0; j < i;

j++) {



// 寻找

nums[0..i-1] 中比 nums[i]

小的元

素



if (nums[i] > nums[j])

{



//

把 nums[i] 接在后

面，即可形成

长度为 dp[j]

+ 1，





// 且以

nums[i] 为结尾的递

增子序列





dp[i] = Math.max(dp[i], dp[j]

+ 1);



}

}

}



结

合我们刚才

说的

base case，下面我

们看一下完

整代码：



class

Solution {

public:

int lengthOfLIS(vector<int>&

nums) {



// 定义

：dp[i] 表示以 nums[i]

这个

数结尾的最

长递增子序

列的长度



vector<int> dp(nums.size());



// base case：dp 数

组全都初始

化为

1



fill(dp.begin(), dp.end(), 1);



for (int i

= 0; i <

nums.size(); i++) {





for (int j =

0; j < i;

j++) {





if

(nums[i] > nums[j]) {









dp[i] = max(dp[i], dp[j]

+ 1);







}



}



}







int res = 0;



for (int

i = 0; i

< dp.size(); i++) {





res = max(res,

dp[i]);



}



return res;

}

};

算法可

视化面板



至

此，这道题就

解决了，时间

复杂度

O(N2)O(N2)。总结

一下如何找

到动态规划

的状态转移

关系：



1、明确 dp

数

组的定义。这

一步对于任

何动态规划

问题都很重

要，如果不得

当或者不够

清晰，会阻碍

之后的步骤

。



2、根据 dp

数组的

定义，运用数

学归纳法的

思想，假设 dp[0...i-1] 都

已知，想办法

求出 dp[i]，一旦这

一步完成，整

个题目基本

就解决了。

但

如果无法完

成这一步，很

可能就是 dp 数

组的定义不

够恰当，需要

重新定义 dp

数

组的含义；或

者可能是 dp 数

组存储的信

息还不够，不

足以推出下

一步的答案

，需要把 dp

数组

扩大成二维

数组甚至三

维数组。



目前

的解法是标

准的动态规

划，但对最长

递增子序列

问题来说，这

个解法不是

最优的，可能

无法通过所

有测试用例

了，下面讲讲

更高效的解

法。

二、二分查

找解法

这个

解法的时间

复杂度为 O(NlogN)O(NlogN)，但

是说实话，正

常人基本想

不到这种解

法（也许玩过

某些纸牌游

戏的人可以

想出来）。所以

大家了解一

下就好，正常

情况下能够

给出动态规

划解法就已

经很不错了

。



根据题目的

意思，我都很

难想象这个

问题竟然能

和二分查找

扯上关系。其

实最长递增

子序列和一

种叫做

patience game 的纸

牌游戏有关

，甚至有一种

排序方法就

叫做 patience

sorting（耐心排

序）。



为了简单

起见，后文跳

过所有数学

证明，通过一

个简化的例

子来理解一

下算法思路

。

首先，给你一

排扑克牌，我

们像遍历数

组那样从左

到右一张一

张处理这些

扑克牌，最终

要把这些牌

分成若干堆

。



处理这些扑

克牌要遵循

以下规则：

只

能把点数小

的牌压到点

数比它大的

牌上；如果当

前牌点数较

大没有可以

放置的堆，则

新建一个堆

，把这张牌放

进去；如果当

前牌有多个

堆可供选择

，则选择最左

边的那一堆

放置。



比如说

上述的扑克

牌最终会被

分成这样 5

堆

（我们认为纸

牌 A 的牌面是

最大的，纸牌

2 的牌面是最

小的）。

为什么

遇到多个可

选择堆的时

候要放到最

左边的堆上

呢？因为这样

可以保证牌

堆顶的牌有

序（2, 4, 7, 8,

Q），证明略。



按

照上述规则

执行，可以算

出最长递增

子序列，牌的

堆数就是最

长递增子序

列的长度，证

明略。

我们只

要把处理扑

克牌的过程

编程写出来

即可。每次处

理一张扑克

牌不是要找

一个合适的

牌堆顶来放

吗，牌堆顶的

牌不是有序

吗，这就能用

到二分查找

了：用二分查

找来搜索当

前牌应放置

的位置。



Tip

前文

二分查找算

法详解 详细

介绍了二分

查找的细节

及变体，这里

就完美应用

上了，如果没

读过强烈建

议阅读。



class

Solution {

public:

int lengthOfLIS(vector<int>&

nums) {



vector<int> top(nums.size());



// 牌堆

数初始化为

0



int piles = 0;



for (int

i = 0; i

< nums.size(); i++) {





// 要处理的扑

克牌





int poker = nums[i];





// *****

搜索左

侧边界的二

分查找 *****





int left = 0,

right = piles;





while (left < right)

{





int mid

= (left + right)

/ 2;





if

(top[mid] > poker) {









right = mid;







} else if (top[mid]

< poker) {







left

= mid + 1;







} else {







right

= mid;





}





}





// ********************************









// 没找

到合适的牌

堆，新建一堆







if (left == piles)

piles++;



//

把这张牌放

到牌堆顶



top[left]

= poker;



}



// 牌

堆数就是 LIS 长

度



return piles;

}

};

算法可视

化面板



至此

，二分查找的

解法也讲解

完毕。

这个解

法确实很难

想到。首先涉

及数学证明

，谁能想到按

照这些规则

执行，就能得

到最长递增

子序列呢？其

次还有二分

查找的运用

，要是对二分

查找的细节

不清楚，给了

思路也很难

写对。



所以，这

个方法作为

思维拓展好

了。但动态规

划的设计方

法应该完全

理解：假设之

前的答案已

知，利用数学

归纳的思想

正确进行状

态的推演转

移，最终得到

答案。

三、拓展

到二维

我们

看一个经常

出现在生活

中的有趣问

题，力扣第 354 题

「俄罗斯套娃

信封问题」，先

看下题目：

354.

俄

罗斯套娃信

封问题 | 力扣

| LeetCode

|  🔴

给你一个二

维整数数组

envelopes ，其中 envelopes[i] =

[wi, hi] ，表示第

i 个信封的宽

度和高度。

当

另一个信封

的宽度和高

度都比这个

信封大的时

候，这个信封

就可以放进

另一个信封

里，如同俄罗

斯套娃一样

。



请计算 最多

能有多少个

信封能组成

一组“俄罗斯

套娃”信封（即

可以把一个

信封放到另

一个信封里

面）。

注意：不允

许旋转信封

。

示例 1：



输入：envelopes

= [[5,4],[6,4],[6,7],[2,3]]

输

出：3

解释：最多

信封的个数

为

3, 组合为: [2,3] =>

[5,4] => [6,7]。

示

例 2：



输入：envelopes

= [[1,1],[1,1],[1,1]]

输出

：1

提示：

1 <= envelopes.length

<= 105

envelopes[i].length == 2

1

<= wi, hi <=

105



这道题

目其实是最

长递增子序

列的一个变

种，因为每次

合法的嵌套

是大的套小

的，相当于在

二维平面中

找一个最长

递增的子序

列，其长度就

是最多能嵌

套的信封个

数。

前面说的

标准 LIS 算法只

能在一维数

组中寻找最

长子序列，而

我们的信封

是由 (w,

h) 这样的

二维数对形

式表示的，如

何把 LIS 算法运

用过来呢？

读

者也许会想

，通过 w × h

计算面

积，然后对面

积进行标准

的 LIS 算法。但是

稍加思考就

会发现这样

不行，比如 1

× 10 大

于 3

× 3，但是显然

这样的两个

信封是无法

互相嵌套的

。



这道题的解

法比较巧妙

：

先对宽度 w 进

行升序排序

，如果遇到 w

相

同的情况，则

按照高度 h 降

序排序；之后

把所有的 h

作

为一个数组

，在这个数组

上计算 LIS 的长

度就是答案

。

画个图理解

一下，先对这

些数对进行

排序：



然后在

h 上寻找最长

递增子序列

，这个子序列

就是最优的

嵌套方案：

那

么为什么这

样就可以找

到可以互相

嵌套的信封

序列呢？稍微

思考一下就

明白了：



首先

，对宽度 w

从小

到大排序，确

保了 w 这个维

度可以互相

嵌套，所以我

们只需要专

注高度 h

这个

维度能够互

相嵌套即可

。



其次，两个 w

相

同的信封不

能相互包含

，所以对于宽

度 w 相同的信

封，对高度 h

进

行降序排序

，保证二维 LIS 中

不存在多个

w 相同的信封

（因为题目说

了长宽相同

也无法嵌套

）。

下面看解法

代码：



class Solution

{

public:

// envelopes =

{{w, h}, {w, h}...}

int

maxEnvelopes(vector<vector<int>>& envelopes) {



int n =

envelopes.size();



// 按宽度

升序排列，如

果宽度一样

，则按高度降

序排列



sort(envelopes.begin(), envelopes.end(), [](vector<int>& a,

vector<int>& b) {





return a[0] == b[0]

?





b[1]

< a[1] : a[0]

< b[0];



});



// 对高

度数组寻找

LIS



vector<int> height(n);



for (int i =

0; i < n;

i++)



height[i]

= envelopes[i][1];



return lengthOfLIS(height);

}

int

lengthOfLIS(vector<int>& nums) {



// 见前文

}

};

算法

可视化面板

为了复用之

前的函数，我

将代码分为

了两个函数

，你也可以合

并代码，节省

下

height 数组的空

间。



由于增加

了测试用例

，这里必须使

用二分搜索

版的

lengthOfLIS 函数才

能通过所有

测试用例。这

样的话算法

的时间复杂

度为 O(NlogN)O(NlogN)，因为排

序和计算 LIS

各

需要 O(NlogN)O(NlogN) 的时间

，加到一起还

是 O(NlogN)O(NlogN)；空间复杂

度为

O(N)O(N)，因为计

算 LIS 的函数中

需要一个 top

数

组。

引用本文

的题目





上次

编辑于:

2025/2/13 16:59:49

上一

页

动态规划

解题套路框

架

下一页

base case 和

备忘录的初

始值怎么定

？

登录后查看

/发表评论



版

权所有，侵权

必究 ©

2019 - 2025 labuladong

川公网

安备51010602002050  蜀ICP备2023008303号
