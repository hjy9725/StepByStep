# 动态规划之

KMP字符匹配算

法



<p

align='center'>

<a href="https://github.com/labuladong/fucking-algorithm" target="view_window"><img

alt="GitHub" src="https://img.shields.io/github/stars/labuladong/fucking-algorithm?label=Stars&style=flat-square&logo=GitHub"></a>

<a href="https://labuladong.online/algo/"

target="_blank"><img class="my_header_icon" src="https://img.shields.io/static/v1?label=精品课程

&message=查看&color=pink&style=flat"></a>

<a

href="https://www.zhihu.com/people/labuladong"><img src="https://img.shields.io/badge/%E7%9F%A5%E4%B9%8E-@labuladong-000000.svg?style=flat-square&logo=Zhihu"></a>

<a href="https://space.bilibili.com/14089380"><img

src="https://img.shields.io/badge/B站-@labuladong-000000.svg?style=flat-square&logo=Bilibili"></a>

</p>



![](https://labuladong.online/algo/images/souyisou1.png)

**通知

：[新版网站会

员](https://labuladong.online/algo/intro/site-vip/) 即将涨价

；已支持老用

户续费~另外

，建议你在我

的 [网站](https://labuladong.online/algo/) 学习

文章，体验更

好。**

读完本文

，你不仅学会

了算法套路

，还可以顺便

解决如下题

目：

| LeetCode | 力扣

| 难度

|

| :----:

| :----: | :----:

|

| [28. Find

the Index of the

First Occurrence in a

String](https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/) | [28. 找出字符串

中第一个匹

配项的下标

](https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/)

| 🟠



**-----------**

::: tip



阅读本文之

前，建议你先

学习一下另

一种字符串

匹配算法：[Rabin

Karp 字

符匹配算法

](https://labuladong.online/algo/practice-in-action/rabinkarp/)。



:::

KMP 算法（Knuth-Morris-Pratt 算法）是

一个著名的

字符串匹配

算法，效率很

高，但是确实

有点复杂。

很

多读者抱怨

KMP 算法无法理

解，这很正常

，想到大学教

材上关于 KMP 算

法的讲解，也

不知道有多

少未来的

Knuth、Morris、Pratt 被

提前劝退了

。有一些优秀

的同学通过

手推 KMP 算法的

过程来辅助

理解该算法

，这是一种办

法，不过本文

要从逻辑层

面帮助读者

理解算法的

原理。十行代

码之间，KMP

灰飞

烟灭。



**先在开

头约定，本文

用



pat



表示模式串

，长度为



M



，



txt



表示文本串

，长度为



N



。KMP 算法是在



txt



中查找子串



pat



，如果存在，返

回这个子串

的起始索引

，否则返回 -1**。



为

什么我认为

KMP

算法就是个

动态规划问

题呢，等会再

解释。对于动

态规划，之前

多次强调了

要明确



dp



数组的含义

，而且同一个

问题可能有

不止一种定

义



dp



数组含义的

方法，不同的

定义会有不

同的解法。



读

者见过的 KMP

算

法应该是，一

波诡异的操

作处理



pat



后形成一个

一维的数组



next



，然后根据这

个数组经过

又一波复杂

操作去匹配



txt



。时间复杂度

O(N)，空间复杂度

O(M)。其实它这个



next



数组就相当

于



dp



数组，其中元

素的含义跟



pat



的前缀和后

缀有关，判定

规则比较复

杂，不好理解

。**本文则用一

个二维的



dp



数组（但空间

复杂度还是

O(M)），重新定义其

中元素的含

义，使得代码

长度大大减

少，可解释性

大大提高**。



::: note

本

文的代码参

考《算法4》，原代

码使用的数

组名称是



dfa



（确定有限状

态机），因为我

们的公众号

之前有一系

列动态规划

的文章，就不

说这么高大

上的名词了

，我对书中代

码进行了一

点修改，并沿

用



dp



数组的名称

。



:::

### 一、KMP 算法概述

首先还是简

单介绍一下

KMP

算法和暴力

匹配算法的

不同在哪里

，难点在哪里

，和动态规划

有啥关系。



力

扣第 28

题「实现

strStr」就是字符串

匹配问题，暴

力的字符串

匹配算法很

容易写，看一

下它的运行

逻辑：



<!-- muliti_language

-->



java

// 暴力匹配（伪

码）

int

search(String pat, String txt)

{

int M = pat.length;

int

N = txt.length;

for (int

i = 0; i

<= N - M;

i++) {



int j;



for (j = 0;

j < M; j++)

{



if

(pat[j] != txt[i+j])







break;



}



// pat 全都匹配

了



if (j ==

M) return i;

}

// txt

中不存在

pat 子串

return -1;

}



对于暴力算

法，如果出现

不匹配字符

，同时回退



txt



和



pat



的指针，嵌套

for 循环，时间复

杂度



O(MN)



，空间复杂度



O(1)



。最主要的问

题是，如果字

符串中重复

的字符比较

多，该算法就

显得很蠢。



比

如



txt = "aaacaaab", pat

= "aaab"



：



![](https://labuladong.online/algo/images/kmp/1.gif)

很明显，



pat



中根本没有

字符 c，根本没

必要回退指

针



i



，暴力解法明

显多做了很

多不必要的

操作。



KMP 算法的

不同之处在

于，它会花费

空间来记录

一些信息，在

上述情况中

就会显得很

聪明：

![](https://labuladong.online/algo/images/kmp/2.gif)



再比如

类似的



txt = "aaaaaaab", pat

= "aaab"



，暴力解法还

会和上面那

个例子一样

蠢蠢地回退

指针



i



，而 KMP 算法又会

耍聪明：

![](https://labuladong.online/algo/images/kmp/3.gif)



因为

KMP 算法知道字

符

b 之前的字

符 a 都是匹配

的，所以每次

只需要比较

字符

b 是否被

匹配就行了

。



**KMP

算法永不回

退



txt



的指针



i



，不走回头路

（不会重复扫

描



txt



），而是借助



dp



数组中储存

的信息把



pat



移到正确的

位置继续匹

配**，时间复杂

度只需 O(N)，用空

间换时间，所

以我认为它

是一种动态

规划算法。



KMP

算

法的难点在

于，如何计算



dp



数组中的信

息？如何根据

这些信息正

确地移动



pat



的指针？这个

就需要**确定

有限状态自

动机**来辅助

了，别怕这种

高大上的文

学词汇，其实

和动态规划

的



dp



数组如出一

辙，等你学会

了也可以拿

这个词去吓

唬别人。



还有

一点需要明

确的是：**计算

这个



dp



数组，只和



pat



串有关**。意思

是说，只要给

我个



pat



，我就能通过

这个模式串

计算出



dp



数组，然后你

可以给我不

同的



txt



，我都不怕，利

用这个



dp



数组我都能

在 O(N) 时间完成

字符串匹配

。

具体来说，比

如上文举的

两个例子：



python

txt1 = "aaacaaab"

pat = "aaab"

txt2

= "aaaaaaab" 

pat

= "aaab"



我们的



txt



不同，但是



pat



是一样的，所

以 KMP 算法使用

的



dp



数组是同一

个。



只不过对

于



txt1



的下面这个

即将出现的

未匹配情况

：



![](https://labuladong.online/algo/images/kmp/txt1.jpg)



dp



数组指示



pat



这样移动：



![](https://labuladong.online/algo/images/kmp/txt2.jpg)

::: note



这

个



j



不要理解为

索引，它的含

义更准确地

说应该是**状

态**（state），所以它会

出现这个奇

怪的位置，后

文会详述。



:::

而

对于



txt2



的下面这个

即将出现的

未匹配情况

：



![](https://labuladong.online/algo/images/kmp/txt3.jpg)



dp



数组指示



pat



这样移动：



![](https://labuladong.online/algo/images/kmp/txt4.jpg)

明

白了



dp



数组只和



pat



有关，那么我

们这样设计

KMP 算法就会比

较漂亮：



<!--

muliti_language -->



java

public class KMP

{

private int[][] dp;

private String

pat;

public KMP(String pat)

{



this.pat = pat;



// 通过 pat

构建 dp 数

组



// 需要 O(M)

时间



}

public int search(String

txt) {



// 借助 dp 数组去

匹配

txt



// 需要 O(N) 时

间

}

}



这样，当我们

需要用同一



pat



去匹配不同



txt



时，就不需要

浪费时间构

造



dp



数组了：



java

KMP kmp =

new KMP("aaab");

int pos1

= kmp.search("aaacaaab"); //4

int

pos2 = kmp.search("aaaaaaab"); //4



### 二、状态机概

述



为什么说

KMP

算法和状态

机有关呢？是

这样的，我们

可以认为



pat



的匹配就是

状态的转移

。比如当 pat = "ABABC"：

![](https://labuladong.online/algo/images/kmp/state.jpg)



如上

图，圆圈内的

数字就是状

态，状态 0

是起

始状态，状态

5（



pat.length



）是终止状态

。开始匹配时



pat



处于起始状

态，一旦转移

到终止状态

，就说明在



txt



中找到了



pat



。比如说当前

处于状态 2，就

说明字符 "AB" 被

匹配：

![](https://labuladong.online/algo/images/kmp/state2.jpg)



另外，处

于不同状态

时，



pat



状态转移的

行为也不同

。比如说假设

现在匹配到

了状态 4，如果

遇到字符 A 就

应该转移到

状态

3，遇到字

符 C 就应该转

移到状态 5，如

果遇到字符

B

就应该转移

到状态 0：



![](https://labuladong.online/algo/images/kmp/state4.jpg)

具体

什么意思呢

，我们来一个

个举例看看

。用变量



j



表示指向当

前状态的指

针，当前



pat



匹配到了状

态 4：



![](https://labuladong.online/algo/images/kmp/exp1.jpg)

如果遇到

了字符 "A"，根据

箭头指示，转

移到状态 3 是

最聪明的：

![](https://labuladong.online/algo/images/kmp/exp3.jpg)



如

果遇到了字

符 "B"，根据箭头

指示，只能转

移到状态

0（一

夜回到解放

前）：



![](https://labuladong.online/algo/images/kmp/exp5.jpg)

如果遇到

了字符 "C"，根据

箭头指示，应

该转移到终

止状态 5，这也

就意味着匹

配完成：

![](https://labuladong.online/algo/images/kmp/exp7.jpg)



当然

了，还可能遇

到其他字符

，比如 Z，但是显

然应该转移

到起始状态

0，因为



pat



中根本都没

有字符 Z：



![](https://labuladong.online/algo/images/kmp/z.jpg)

这里

为了清晰起

见，我们画状

态图时就把

其他字符转

移到状态 0 的

箭头省略，只

画



pat



中出现的字

符的状态转

移：



![](https://labuladong.online/algo/images/kmp/allstate.jpg)

KMP 算法最关

键的步骤就

是构造这个

状态转移图

。**要确定状态

转移的行为

，得明确两个

变量，一个是

当前的匹配

状态，另一个

是遇到的字

符**；确定了这

两个变量后

，就可以知道

这个情况下

应该转移到

哪个状态。



下

面看一下

KMP 算

法根据这幅

状态转移图

匹配字符串



txt



的过程：



![](https://labuladong.online/algo/images/kmp/kmp.gif)

**请记

住这个 GIF 的匹

配过程，这就

是 KMP

算法的核

心逻辑**！



为了

描述状态转

移图，我们定

义一个二维

dp 数组，它的含

义如下：



python

dp[j][c] = next

0 <= j <

M，代表当前的

状态

0 <= c

< 256，代表遇

到的字符（ASCII 码

）

0

<= next <= M，代表下一个

状态

dp[4]['A'] = 3 表示：

当

前是状态 4，如

果遇到字符

A，

pat 应该转移到

状态

3



dp[1]['B'] =

2 表示：

当

前是状态 1，如

果遇到字符

B，

pat 应该转移到

状态 2



根据我们这

个 dp 数组的定

义和刚才状

态转移的过

程，我们可以

先写出 KMP

算法

的 search 函数代码

：

<!-- muliti_language -->



java

public int search(String

txt) {

int M =

pat.length();

int N = txt.length();

//

pat 的初始态为

0

int j =

0;

for (int i =

0; i < N;

i++) {



// 当前是状态

j，遇到字符 txt[i]，



// pat 应

该转移到哪

个状态？



j =

dp[j][txt.charAt(i)];



// 如果

达到终止态

，返回匹配开

头的索引



if (j == M)

return i - M

+ 1;

}

// 没

到达终止态

，匹配失败

return -1;

}



到这里，应该

还是很好理

解的吧，



dp



数组就是我

们刚才画的

那幅状态转

移图，如果不

清楚的话回

去看下 GIF 的算

法演进过程

。下面讲解：如

何通过



pat



构建这个



dp



数组？



### 三、构建

状态转移图



回想刚才说

的：**要确定状

态转移的行

为，必须明确

两个变量，一

个是当前的

匹配状态，另

一个是遇到

的字符**，而且

我们已经根

据这个逻辑

确定了



dp



数组的含义

，那么构造



dp



数组的框架

就是这样：



python

for 0 <=

j < M: #

状态

for 0 <= c

< 256: # 字符



dp[j][c] =

next



这个 next 状态应

该怎么求呢

？显然，**如果遇

到的字符



c



和



pat[j]



匹配的话**，状

态就应该向

前推进一个

，也就是说



next = j +

1



，我们不妨称

这种情况为

**状态推进**：



![](https://labuladong.online/algo/images/kmp/forward.jpg)

**如

果字符



c



和



pat[j]



不匹配的话

**，状态就要回

退（或者原地

不动），我们不

妨称这种情

况为**状态重

启**：



![](https://labuladong.online/algo/images/kmp/back.jpg)

那么，如何

得知在哪个

状态重启呢

？解答这个问

题之前，我们

再定义一个

名字：**影子状

态**（我编的名

字），用变量



X



表示。**所谓影

子状态，就是

和当前状态

具有相同的

前缀**。比如下

面这种情况

：



![](https://labuladong.online/algo/images/kmp/shadow.jpg)

当前状态



j = 4



，其影子状态

为



X = 2



，它们都有相

同的前缀 "AB"。因

为状态



X



和状态



j



存在相同的

前缀，所以当

状态



j



准备进行状

态重启的时

候（遇到的字

符



c



和



pat[j]



不匹配），可以

通过



X



的状态转移

图来获得**最

近的重启位

置**。



比如说刚

才的情况，如

果状态



j



遇到一个字

符 "A"，应该转移

到哪里呢？首

先只有遇到

"C" 才能推进状

态，遇到 "A"

显然

只能进行状

态重启。**状态



j



会把这个字

符委托给状

态



X



处理，也就是



dp[j]['A'] = dp[X]['A']



**：



![](https://labuladong.online/algo/images/kmp/shadow1.jpg)

为什么这样

可以呢？因为

：既然



j



这边已经确

定字符 "A" 无法

推进状态，**只

能回退**，而且

KMP 就是要**尽可

能少的回退

**，以免多余的

计算。那么



j



就可以去问

问和自己具

有相同前缀

的



X



，如果



X



遇见 "A" 可以进

行「状态推进

」，那就转移过

去，因为这样

回退最少。

![](https://labuladong.online/algo/images/kmp/A.gif)



当

然，如果遇到

的字符是 "B"，状

态



X



也不能进行

「状态推进」，只

能回退，



j



只要跟着



X



指引的方向

回退就行了

：



![](https://labuladong.online/algo/images/kmp/shadow2.jpg)

你也许会问

，这个



X



怎么知道遇

到字符 "B" 要回

退到状态 0

呢

？因为



X



永远跟在



j



的身后，状态



X



如何转移，在

之前就已经

算出来了。动

态规划算法

不就是利用

过去的结果

解决现在的

问题吗？



这样

，我们就细化

一下刚才的

框架代码：



python

int X #

影子状态

for 0 <=

j < M:

for 0

<= c < 256:



if c

== pat[j]:





# 状

态推进





dp[j][c] = j +

1



else:





# 状态

重启





# 委托 X 计

算重启位置







dp[j][c] = dp[X][c]



### 四、代码实现

如果之前的

内容你都能

理解，恭喜你

，现在就剩下

一个问题：影

子状态



X



是如何得到

的呢？下面先

直接看完整

代码吧。



<!-- muliti_language

-->



java

public class KMP

{

private int[][] dp;

private String

pat;

public KMP(String pat)

{



this.pat = pat;



int M =

pat.length();



// dp[状态][字符] = 下

个状态



dp =

new int[M][256];



// base case



dp[0][pat.charAt(0)] = 1;



// 影子

状态

X 初始为

0



int X = 0;



// 当前状态

j 从

1 开始



for (int j

= 1; j <

M; j++) {





for (int c =

0; c < 256;

c++) {





if

(pat.charAt(j) == c)









dp[j][c] = j +

1;





else









dp[j][c] = dp[X][c];





}



//

更新影

子状态



X

= dp[X][pat.charAt(j)];



}

}

public int search(String

txt) {...}

}



先解释一下

这一行代码

：



java

// base case

dp[0][pat.charAt(0)] = 1;



这行代码是

base case，只有遇到 pat[0] 这

个字符才能

使状态从

0 转

移到 1，遇到其

它字符的话

还是停留在

状态 0（Java

默认初

始化数组全

为 0）。



影子状态



X



是先初始化

为 0，然后随着



j



的前进而不

断更新的。下

面看看到底

应该**如何更

新影子状态



X



**：



java

int X =

0;

for (int j

= 1; j <

M; j++) {

...

// 更新影子状

态

//

当前是状

态 X，遇到字符

pat[j]，

// pat 应该转移到

哪个状态？

X

= dp[X][pat.charAt(j)];

}



更新



X



其实和



search



函数中更新

状态



j



的过程是非

常相似的：



java

int j =

0;

for (int i

= 0; i <

N; i++) {

// 当前是状态

j，遇到字符

txt[i]，

// pat 应

该转移到哪

个状态？

j =

dp[j][txt.charAt(i)];

...

}



**其中的原理

非常微妙**，注

意代码中 for 循

环的变量初

始值，可以这

样理解：后者

是在



txt



中匹配



pat



，前者是在



pat



中匹配



pat[1..end]



，状态



X



总是落后状

态



j



一个状态，与



j



具有最长的

相同前缀。所

以我把



X



比喻为影子

状态，似乎也

有一点贴切

。



另外，构建 dp

数

组是根据 base case



dp[0][..]



向后推演。这

就是我认为

KMP 算法就是一

种动态规划

算法的原因

。



下面来看一

下状态转移

图的完整构

造过程，你就

能理解状态



X



作用之精妙

了：



![](https://labuladong.online/algo/images/kmp/dfa.gif)

至此，KMP 算法

的核心终于

写完啦啦啦

啦！看下 KMP 算法

的完整代码

吧：

<!-- muliti_language -->



java

public class KMP

{

private int[][] dp;

private String

pat;

public KMP(String pat)

{



this.pat = pat;



int M =

pat.length();



// dp[状态][字符] = 下

个状态



dp =

new int[M][256];



// base case



dp[0][pat.charAt(0)] = 1;



// 影子

状态

X 初始为

0



int X = 0;



// 构建状态转

移图（稍改的

更紧凑了）



for (int

j = 1; j

< M; j++) {





for (int c

= 0; c <

256; c++)





dp[j][c]

= dp[X][c];





dp[j][pat.charAt(j)] = j +

1;



//

更

新影子状态





X =

dp[X][pat.charAt(j)];



}

}

public int search(String

txt) {



int M = pat.length();



int N

= txt.length();



// pat 的初始态为

0



int j =

0;



for (int i =

0; i < N;

i++) {





// 计算 pat 的下一

个状态





j = dp[j][txt.charAt(i)];





// 到达

终止态，返回

结果





if (j == M)

return i - M

+ 1;



}



// 没到达

终止态，匹配

失败



return -1;

}

}



经过之前的

详细举例讲

解，你应该可

以理解这段

代码的含义

了，当然你也

可以把 KMP 算法

写成一个函

数。核心代码

也就是两个

函数中 for

循环

的部分，数一

下有超过十

行吗？



### 五、最后

总结

传统的

KMP 算法是使用

一个一维数

组



next



记录前缀信

息，而本文是

使用一个二

维数组



dp



以状态转移

的角度解决

字符匹配问

题，但是空间

复杂度仍然

是 O(256M) = O(M)。

在



pat



匹配



txt



的过程中，只

要明确了「当

前处在哪个

状态」和「遇到

的字符是什

么」这两个问

题，就可以确

定应该转移

到哪个状态

（推进或回退

）。



对于一个模

式串



pat



，其总共就有

M 个状态，对于

ASCII 字符，总共不

会超过 256

种。所

以我们就构

造一个数组



dp[M][256]



来包含所有

情况，并且明

确



dp



数组的含义

：



dp[j][c] = next



表示，当前是

状态



j



，遇到了字符



c



，应该转移到

状态



next



。



明确了其含

义，就可以很

容易写出 search

函

数的代码。



对

于如何构建

这个



dp



数组，需要一

个辅助状态



X



，它永远比当

前状态



j



落后一个状

态，拥有和



j



最长的相同

前缀，我们给

它起了个名

字叫「影子状

态」。



在构建当

前状态



j



的转移方向

时，只有字符



pat[j]



才能使状态

推进（



dp[j][pat[j]] = j+1



）；而对于其他

字符只能进

行状态回退

，应该去请教

影子状态



X



应该回退到

哪里（



dp[j][other] = dp[X][other]



，其中



other



是除了



pat[j]



之外所有字

符）。



对于影子

状态



X



，我们把它初

始化为 0，并且

随着



j



的前进进行

更新，更新的

方式和 search 过程

更新



j



的过程非常

相似（



X = dp[X][pat[j]]



）。



KMP 算法也就是

动态规划那

点事，我们的

公众号文章

目录有一系

列专门讲动

态规划的，而

且都是按照

一套框架来

的，无非就是

描述问题逻

辑，明确



dp



数组含义，定

义 base case 这点破事

。希望这篇文

章能让大家

对动态规划

有更深的理

解。

<hr>

<details

class="hint-container details">

<summary><strong>引用本文

的文章</strong></summary>

- [我的

刷题心得：算

法的本质](https://labuladong.online/algo/essential-technique/algorithm-summary/)

 -

[滑

动窗口算法

延伸：Rabin Karp 字符匹

配算法](https://labuladong.online/algo/practice-in-action/rabinkarp/)

</details><hr>

**＿＿＿＿＿＿＿＿＿＿＿＿＿**



**《labuladong

的算

法笔记》已经

出版，关注公

众号查看详

情；后台回复

「**全家桶**」可下

载配套 PDF 和刷

题全家桶**：

![](https://labuladong.online/algo/images/souyisou2.png)



======其

他语言代码

======

[28.实现 strStr()](https://leetcode-cn.com/problems/implement-strstr)



###

python



[MoguCloud](https://github.com/MoguCloud) 提供

实

现 strStr() 的 Python

完整代

码：



python

class Solution:

def strStr(self, haystack: str,

needle: str) -> int:

#

边界条件判

断

if not needle:



return 0

pat = needle

txt

= haystack

M =

len(pat)

# dp[状态][字符

] = 下个状态

dp

= [[0 for _

in range(256)] for _

in pat]

# base case

dp[0][ord(pat[0])]

= 1

# 影

子状态 X

初始

化为 0

X = 0

for

j in range(1, M):



for c in range(256):



dp[j][c] =

dp[X][c]



dp[j][ord(pat[j])] = j +

1



# 更新影

子状态



X = dp[X][ord(pat[j])]



N =

len(txt)



# pat 初始

状态为 0



j

= 0



for i in range(N):





# 计算

pat 的下一个状

态



j

= dp[j][ord(txt[i])]



# 到达终止

态，返回结果





if

j == M:





return i - M

+ 1



# 没到达终止

态，匹配失败





return

-1



### javascript



js

class KMP {

constructor(pat) {

this.pat =

pat;

let m = pat.length;



// dp[状态][字符] = 下

个状态

初始

化一个m*256的整

数矩阵

this.dp = new Array(m);

for

(let i = 0;

i < m; i++)

{

this.dp[i] =

new Array(256);

this.dp[i].fill(0,

0, 256);

}

// base

case

this.dp[0][this.pat[0].charCodeAt()] = 1;

//

影子

状态X 初始为

0

let x =

0;

// 构建状态转

移图

for (let

j = 1; j

< m; j++) {



for (let c =

0; c < 256;

c++) {



this.dp[j][c] = this.dp[x][c];



}

//

dp[][对应的

ASCII码]

this.dp[j][this.pat[j].charCodeAt()] =

j + 1;



// 更新影子

状态

x

= this.dp[x][this.pat[j].charCodeAt()]

}

}

search(txt) {

let m

= this.pat.length;

let n =

txt.length;

// pat的初始

态为0

let j

= 0;

for (let i

= 0; i <

n; i++) {



// 计算pat的

下一个状态



j =

this.dp[j][txt[i].charCodeAt()];

//

到达终止态

返回结果

if (j

=== m) return i

- m + 1;

}



// 没

到终止态 匹

配失败

return -1;

}



}

/**

 * @param

{string} haystack

 *

@param {string} needle

* @return {number}

*/

var strStr =

function(haystack, needle) {

if(haystack === ""){

if(needle

!== ""){

return

-1;

}

return 0;

}

if(needle === ""){

return 0;

}

let kmp = new

KMP(needle);

  return

kmp.search(haystack)

};



