




















2. **

3D边界框

编码**：

由于每个驾

驶场景中边

界框的数量

不同，通过

类似于场景

级信息的交

叉注意机制

注入边界框

信息。具体

来说，将每

个框编码为

隐藏向量 

$\mat

hbf{b

}_i$，

其维度与 

$E_{s

cene}

$ 相同。

每个三维边

界框 $\

mathc

al{B}

_i$ 包

含两种类型

的信息：类

标签 $c

_i$ 和

框位置 $

\math

bf{p}

_i$。对

于类别标签

，将类别名

称 $c_

i$ 的池

化向量视为

标签嵌入。

对于框位置

 $\ma

thbf{

p}_i$

，由其8个

角点的坐标

表示，对每

个点使用傅

里叶嵌入，

并通过ML

P进行编码

。然后使用

MLP将类

和位置向量

压缩到一个

隐藏向量中

。每个场景

的所有边界

框的最终隐

状态表示为

 $\ma

thbf{

B} = 

\left

\{ \m

athbf

{b}_1

, \ma

thbf{

b}_2,

 \cdo

ts, \

mathb

f{b}_

n \ri

ght\}

$，其中 

$n$ 是

边界框（b

box）的

数量。理想

情况下，模

型通过训练

学习边界框

和相机姿态

之间的几何

关系。然而

，不同视图

的可见框数

量的分布呈

长尾状。因

此，通过过

滤每个视图

 $\ma

thbf{

q}$ 的

可见目标来

引导学习。

此外，还添

加不可见的

框进行数据

增强。



3. **

道路地图编

码**：地

图以二维网

格的形式存

在。已有研

究表明，加

性编码器可

以将此类数

据纳入模型

指导。但地

图的鸟瞰图

（BEV）

和相机的第

一人称视角

（Firs

t - P

erson

 View

, FPV

）之间固有

的视角差异

会带来问题

。BEVC

ontro

l采用反投

影从BEV

转换为FP

V，但由于

不适定问题

而使情况变

得复杂。在

MAGIC

DRIVE

中，研究提

出显式视图

变换并非必

要，因为足

够的三维线

索（例如，

目标框的高

度和相机姿

势）允许加

性编码器完

成视图变换

。具体来说

，将场景级

和3D边界

框嵌入集成

到地图编码

器中。场景

级嵌入提供

相机姿势，

框嵌入提供

道路高程提

示。此外，

合并文本描

述有助于在

不同条件下

生成道路（

例如，天气

和一天中的

时间）。因

此，地图编

码器可以与

其他条件协

同生成。





#### 

跨视角at

tenti

on模块



在多摄像机

视图生成中

，确保图像

合成在不同

视角之间保

持一致至关

重要。为了

实现这一目

标，引入了

跨视图注意

模块。考虑

到驾驶环境

中摄像头的

稀疏排列，

每个交叉视

图注意力都

允许目标视

图从其直接

左视图和右

视图访问信

息。设 $

I_t$、

$I_l$

 和 $I

_r$ 分

别是目标视

图、左视图

和右视图，

$\mat

hbf{z

}_t$ 

表示目标视

图的隐状态

。目标视图

通过跳跃连

接聚合此类

信息，即 

$\mat

hbf{z

}_t =

 \mat

hbf{z

}_t +

 \tex

t{Cro

ssAtt

n}(I_

t, I_

l) + 

\text

{Cros

sAttn

}(I_t

, I_r

)$。





在UNet

中的交叉注

意模块之后

注入交叉视

图注意，并

应用零初始

化来引导优

化。UNe

t的多层结

构使得模型

能够在多个

堆叠块之后

聚合来自远

程视图的信

息。因此，

对相邻视图

使用跨视图

注意力足以

保证多视图

一致性。





### 模

型训练



#### 

Class

ifier

 - fr

ee Gu

idanc

e



Class

ifier

 - fr

ee Gu

idanc

e增强了条

件指导的影

响。为了实

现有效的C

FG，模型

需要在训练

过程中偶尔

丢弃条件。

鉴于每种条

件的独特性

，对多种条

件应用丢弃

策略较为复

杂。因此，

MAGIC

DRIVE

通过以 $

p$ 的速

率同时删除

场景级条件

（相机姿势

和文本嵌入

），简化了

四种条件的

处理。对于

在编码中具

有空语义表

示的框和地

图（即，框

中的填充标

记和地图中

的0），在

整个训练过

程中保持不

变。在推理

时，对所有

条件都使用

空值，从而

实现有意义

的放大来指

导生成。





#### 

训练目标和

增强



将所有条件

作为输入注

入后，训练

目标调整为

多条件场景

。此外，在

训练MAG

ICDRI

VE时采用

两个基本策

略。首先，

为了抵消对

可见框的过

滤影响，本

文随机添加

不可见框作

为数据增强

，提升模型

的几何变换

能力。其次

，为了充分

利用跨视图

注意力，促

进跨多个视

图的信息共

享，在每个

训练步骤中

将独特的噪

声应用于不

同的视图，

从而防止损

失陷入局部

解（例如，

跨不同视图

输出共享组

件）。相同

的随机噪声

专门用于推

理过程。





### 实

验对比一览



#### 

实验设置



1. **

数据集和基

线**：选

择nuSc

enes数

据集作为M

AGICD

RIVE的

测试基础，

该数据集是

驾驶场景中

用于鸟瞰图

（BEV）

分割和检测

的常用数据

集。遵循官

方配置，使

用700个

街景场景进

行训练，1

50个进行

验证。基线

模型为BE

VGen和

BEVCo

ntrol

，它们都是

近期提出的

街景生成方

法。本方法

考虑了10

个目标类别

和8个道路

类别，在多

样性方面超

越了基线模

型。



2. **

评估指标*

*：评估街

景生成的逼

真度和可控

性。逼真度

主要使用F

reche

t Inc

eptio

n Dis

tance

（FID）

进行测量，

该指标反映

了图像合成

质量。对于

可控性，通

过两个感知

任务对MA

GICDR

IVE进行

评估：BE

V分割和3

D目标检测

，分别使用

CVT和B

EVFus

ion作为

感知模型。

首先，生成

与验证集注

释对齐的图

像，并使用

在真实数据

上预训练的

感知模型评

估图像质量

和控制精度

。然后，基

于训练集生

成数据，以

检查其对训

练感知模型

作为数据增

强的支持效

果。在可控

阶段，条件

来自验证集

，基于训练

集生成数据

作为训练模

型的数据增

强。



3. **

模型设置*

*：MAG

ICDRI

VE使用来

自Stab

le Di

ffusi

on v1

.5的预训

练权重，仅

训练新增的

参数。根据

Zhang

等人的研究

，为地图编

码器Ema

p创建了一

个可训练的

UNet编

码器。新参

数，除了零

初始化模块

和类令牌之

外，均随机

初始化。采

用两个分辨

率来协调感

知任务和基

线之间的差

异：224

×400（

0.25×

下采样），

遵循BEV

Gen和C

VT模型的

设置；更高

的272×

736（0

.5×下采

样）用于支

持BEVF

usion

。除非另有

说明，图像

使用Uni

PC调度程

序进行20

步采样，C

FG设置为

2.0。





### M

AGICD

RIVE的

潜力与优势



MAGIC

DRIVE

对高质量多

摄像机街景

生成进行多

重几何控制

的编码。通

过分离编码

设计，MA

GICDR

IVE充分

利用来自3

D标注的几

何信息，并

实现对街景

的准确语义

控制。此外

，所提出的

跨视图注意

力模块简单

而有效，确

保了多摄像

机视图之间

的一致性。

实验结果证

明，MAG

ICDRI

VE生成的

图像对3D

标注具有高

逼真度。多

重控制使M

AGICD

RIVE在

生成新的街

景时具有更

强的泛化能

力。与此同

时，MAG

ICDRI

VE可用于

数据增强，

有助于在B

EV分割和

3D目标检

测任务中对

感知模型进

行训练。





### 限

制与未来工

作



尽管MAG

ICDRI

VE可以生

成夜间视图

，但生成的

图像在黑暗

程度上不如

真实图像。

这可能是因

为扩散模型

在生成过于

黑暗的图像

时存在困难

。此外，M

AGICD

RIVE无

法为nuS

cenes

数据集生成

未见过的天

气情况。未

来的工作可

能聚焦于如

何提高街景

生成的跨领

域泛化能力

。




















     

     

 or r

 >= r

ows o

r c <

 0 or

 c >=

 cols

 or g

rid[r

][c] 

== '0

':



     

     

     

 retu

rn



     

     

  # 将

当前陆地标

记为水



     

     

  gri

d[r][

c] = 

'0'



     

     

  # 向

四个方向进

行深度优先

搜索



     

     

  dfs

(r + 

1, c)



     

     

  dfs

(r - 

1, c)



     

     

  dfs

(r, c

 + 1)



     

     

  dfs

(r, c

 - 1)





     

   fo

r r i

n ran

ge(ro

ws):



     

     

  for

 c in

 rang

e(col

s):



     

     

     

 if g

rid[r

][c] 

== '1

':



     

     

     

     

dfs(r

, c)



     

     

     

     

count

 += 1



     

   re

turn 

count

class

 Solu

tion:



    d

ef nu

mIsla

nds(s

elf, 

grid:

 List

[List

[str]

]) ->

 int:



     

   if

 not 

grid 

or no

t gri

d[0]:



     

     

  ret

urn 0



     

   ro

ws, c

ols =

 len(

grid)

, len

(grid

[0])



     

   co

unt =

 0





     

   de

f dfs

(r, c

):



     

     

  # 判

断坐标是否

越界或当前

位置不是陆

地



     

     

  if 

r < 0

 or r

 >= r

ows o

r c <

 0 or

 c >=

 cols

 or g

rid[r

][c] 

== '0

':



     

     

     

 retu

rn



     

     

  # 将

当前陆地标

记为水



     

     

  gri

d[r][

c] = 

'0'



     

     

  # 向

四个方向进

行深度优先

搜索



     

     

  dfs

(r + 

1, c)



     

     

  dfs

(r - 

1, c)



     

     

  dfs

(r, c

 + 1)



     

     

  dfs

(r, c

 - 1)





     

   fo

r r i

n ran

ge(ro

ws):



     

     

  for

 c in

 rang

e(col

s):



     

     

     

 if g

rid[r

][c] 

== '1

':



     

     

     

     

dfs(r

, c)



     

     

     

     

count

 += 1



     

   re

turn 

count

class

 Solu

tion:



    d

ef nu

mIsla

nds(s

elf, 

grid:

 List

[List

[str]

]) ->

 int:



     

   if

 not 

grid 

or no

t gri

d[0]:



     

     

  ret

urn 0



     

   ro

ws, c

ols =

 len(

grid)

, len

(grid

[0])



     

   co

unt =

 0





     

   de

f dfs

(r, c

):



     

     

  # 判

断坐标是否

越界或当前

位置不是陆

地



     

     

  if 

r < 0

 or r

 >= r

ows o

r c <

 0 or

 c >=

 cols

 or g

rid[r

][c] 

== '0

':



     

     

     

 retu

rn



     

     

  # 将

当前陆地标

记为水



     

     

  gri

d[r][

c] = 

'0'



     

     

  # 向

四个方向进

行深度优先

搜索



     

     

  dfs

(r + 

1, c)



     

     

  dfs

(r - 

1, c)



     

     

  dfs

(r, c

 + 1)



     

     

  dfs

(r, c

 - 1)





     

   fo

r r i

n ran

ge(ro

ws):



     

     

  for

 c in

 rang

e(col

s):



     

     

     

 if g

rid[r

][c] 

== '1

':



     

     

     

     

dfs(r

, c)



     

     

     

     

count

 += 1



     

   re

turn 

count

